type ActionLog = record {
  user_principal : opt principal;
  action_type : ActionType;
  timestamp : nat64;
};
type ActionType = variant {
  Bet : record { amount : nat64 };
  Win : record { amount : nat64 };
  Leave;
  Stage : record { stage : DealStage };
  Call;
  Fold;
  Join;
  BigBlind;
  PlayersHandsRankedMainPot : record {
    hands : vec record { text; vec Card; nat64 };
  };
  Raise : record { amount : nat64 };
  SidePotCreated;
  Kicked : record { reason : text };
  PlayersHandsRankedSidePot : record {
    hands : vec record { text; vec Card; nat64 };
  };
  AllIn : record { amount : nat64 };
  SmallBlind;
  Check;
};
type CanisterLogFeature = variant {
  filterMessageByContains;
  filterMessageByRegex;
};
type CanisterLogMessages = record {
  data : vec LogMessageData;
  lastAnalyzedMessageTimeNanos : opt nat64;
};
type CanisterLogMessagesInfo = record {
  features : vec opt CanisterLogFeature;
  lastTimeNanos : opt nat64;
  count : nat32;
  firstTimeNanos : opt nat64;
};
type CanisterLogRequest = variant {
  getMessagesInfo;
  getMessages : GetLogMessagesParameters;
  getLatestMessages : GetLatestLogMessagesParameters;
};
type CanisterLogResponse = variant {
  messagesInfo : CanisterLogMessagesInfo;
  messages : CanisterLogMessages;
};
type CanisterMetrics = record { data : CanisterMetricsData };
type CanisterMetricsData = variant {
  hourly : vec HourlyMetricsData;
  daily : vec DailyMetricsData;
};
type Card = record { value : Value; suit : Suit };
type CollectMetricsRequestType = variant { force; normal };
type DailyMetricsData = record {
  updateCalls : nat64;
  canisterHeapMemorySize : NumericEntity;
  canisterCycles : NumericEntity;
  canisterMemorySize : NumericEntity;
  timeMillis : int;
};
type DealStage = variant {
  Opening;
  Flop;
  Turn;
  River;
  Showdown;
  Fresh;
  Blinds;
};
type GetInformationRequest = record {
  status : opt StatusRequest;
  metrics : opt MetricsRequest;
  logs : opt CanisterLogRequest;
  version : bool;
};
type GetInformationResponse = record {
  status : opt StatusResponse;
  metrics : opt MetricsResponse;
  logs : opt CanisterLogResponse;
  version : opt nat;
};
type GetLatestLogMessagesParameters = record {
  upToTimeNanos : opt nat64;
  count : nat32;
  filter : opt GetLogMessagesFilter;
};
type GetLogMessagesFilter = record {
  analyzeCount : nat32;
  messageRegex : opt text;
  messageContains : opt text;
};
type GetLogMessagesParameters = record {
  count : nat32;
  filter : opt GetLogMessagesFilter;
  fromTimeNanos : opt nat64;
};
type GetMetricsParameters = record {
  dateToMillis : nat;
  granularity : MetricsGranularity;
  dateFromMillis : nat;
};
type HourlyMetricsData = record {
  updateCalls : vec nat64;
  canisterHeapMemorySize : vec nat64;
  canisterCycles : vec nat64;
  canisterMemorySize : vec nat64;
  timeMillis : int;
};
type LogMessageData = record { timeNanos : nat64; message : text };
type LogStoreError = variant {
  DeserializationError : text;
  SerializationError : text;
};
type MetricsGranularity = variant { hourly; daily };
type MetricsRequest = record { parameters : GetMetricsParameters };
type MetricsResponse = record { metrics : opt CanisterMetrics };
type NumericEntity = record {
  avg : nat64;
  max : nat64;
  min : nat64;
  first : nat64;
  last : nat64;
};
type Result = variant { Ok; Err : LogStoreError };
type Result_1 = variant { Ok : vec ActionLog; Err : LogStoreError };
type StatusRequest = record {
  memory_size : bool;
  cycles : bool;
  heap_memory_size : bool;
};
type StatusResponse = record {
  memory_size : opt nat64;
  cycles : opt nat64;
  heap_memory_size : opt nat64;
};
type Suit = variant { Spade; Diamond; Club; Heart };
type UpdateInformationRequest = record {
  metrics : opt CollectMetricsRequestType;
};
type Value = variant {
  Ace;
  Six;
  Ten;
  Two;
  Eight;
  Seven;
  Five;
  Four;
  Jack;
  King;
  Nine;
  Three;
  Queen;
};
service : () -> {
  clear_all_logs : () -> (Result);
  clear_logs : (principal) -> (Result);
  clear_logs_before : (principal, nat64) -> (Result);
  getCanistergeekInformation : (GetInformationRequest) -> (
      GetInformationResponse,
    ) query;
  get_action_logs : (principal, nat64, nat64, opt nat32, opt nat32) -> (
      Result_1,
    ) query;
  log_action : (principal, ActionLog) -> (Result);
  log_actions : (principal, vec ActionLog) -> (Result);
  updateCanistergeekInformation : (UpdateInformationRequest) -> ();
}
